[plugin:vite:react-swc] × the name `ScientificHighlightedText` is defined multiple times
     ╭─[/home/runner/workspace/src/components/ui/ScientificHighlightedText.tsx:15:1]
  12 │   scientificLevel: number;
  13 │ }
  14 │ 
  15 │ const ScientificHighlightedText: React.FC<ScientificHighlightedTextProps> = ({ 
     ·       ────────────┬────────────
     ·                   ╰── previous definition of `ScientificHighlightedText` here
  16 │   text, 
  17 │   scientificLevel = 1 
  18 │ }) => {
  19 │   // Regex pour trouver les termes formatés spécialement: [[term-id:displayed text]]
  20 │   const regex = /\[\[([\w-]+):(.*?)\]\]/g;
  21 │   
  22 │   // Si le texte ne contient pas de termes scientifiques ou le niveau est défini à 0, retourner le texte brut
  23 │   if (!regex.test(text) || scientificLevel === 0) {
  24 │     return <span>{text.replace(regex, '$2')}</span>;
  25 │   }
  26 │   
  27 │   // Reset le regex après le test
  28 │   regex.lastIndex = 0;
  29 │   
  30 │   // Diviser le texte en segments (termes scientifiques et texte normal)
  31 │   const segments = [];
  32 │   let lastIndex = 0;
  33 │   let match;
  34 │   
  35 │   while ((match = regex.exec(text)) !== null) {
  36 │     // Ajouter le texte avant le terme scientifique
  37 │     if (match.index > lastIndex) {
  38 │       segments.push({
  39 │         type: 'text',
  40 │         content: text.substring(lastIndex, match.index)
  41 │       });
  42 │     }
  43 │     
  44 │     // Ajouter le terme scientifique
  45 │     segments.push({
  46 │       type: 'term',
  47 │       id: match[1],
  48 │       content: match[2]
  49 │     });
  50 │     
  51 │     lastIndex = regex.lastIndex;
  52 │   }
  53 │   
  54 │   // Ajouter le texte restant après le dernier terme scientifique
  55 │   if (lastIndex < text.length) {
  56 │     segments.push({
  57 │       type: 'text',
  58 │       content: text.substring(lastIndex)
  59 │     });
  60 │   }
  61 │   
  62 │   // Rendu des segments
  63 │   return (
  64 │     <span>
  65 │       {segments.map((segment, index) => {
  66 │         if (segment.type === 'text') {
  67 │           return <span key={index}>{segment.content}</span>;
  68 │         } else {
  69 │           // Trouver le terme scientifique dans la base de données
  70 │           const term = scientificTerms.find(t => t.id === segment.id);
  71 │           
  72 │           // Si le terme n'est pas trouvé, afficher simplement le texte
  73 │           if (!term) {
  74 │             return <span key={index}>{segment.content}</span>;
  75 │           }
  76 │           
  77 │           // Déterminer l'apparence en fonction du niveau scientifique
  78 │           let className = 'cursor-help ';
  79 │           
  80 │           switch(scientificLevel) {
  81 │             case 3: // Niveau expert
  82 │               className += 'font-semibold text-indigo-700 border-b border-dashed border-indigo-300';
  83 │               break;
  84 │             case 2: // Niveau intermédiaire
  85 │               className += 'font-medium text-indigo-600 border-b border-dotted border-indigo-200';
  86 │               break;
  87 │             case 1: // Niveau basique
  88 │             default:
  89 │               className += 'text-indigo-600';
  90 │               break;
  91 │           }
  92 │           
  93 │           return (
  94 │             <HoverCard key={index} openDelay={300} closeDelay={100}>
  95 │               <HoverCardTrigger asChild>
  96 │                 <span className={className}>{segment.content}</span>
  97 │               </HoverCardTrigger>
  98 │               <HoverCardContent className="w-80 text-sm" side="top">
  99 │                 <div className="space-y-2">
 100 │                   <h4 className="font-medium text-slate-900">{term.title}</h4>
 101 │                   <p className="text-slate-600 text-xs leading-relaxed">{term.description}</p>
 102 │                   <div className="flex items-center pt-1">
 103 │                     <span className="text-xs bg-slate-100 text-slate-600 rounded-full px-2 py-0.5">
 104 │                       {term.category}
 105 │                     </span>
 106 │                   </div>
 107 │                 </div>
 108 │               </HoverCardContent>
 109 │             </HoverCard>
 110 │           );
 111 │         }
 112 │       })}
 113 │     </span>
 114 │   );
 115 │ };
 116 │ 
 117 │ export default ScientificHighlightedText;
 118 │ import React from 'react';
 119 │ import { cn } from '@/lib/utils';
 120 │ 
 121 │ interface ScientificHighlightedTextProps {
 122 │   children: React.ReactNode;
 123 │   className?: string;
 124 │ }
 125 │ 
 126 │ const ScientificHighlightedText: React.FC<ScientificHighlightedTextProps> = ({ 
     ·       ────────────┬────────────
     ·                   ╰── `ScientificHighlightedText` redefined here
 127 │   children, 
 128 │   className 
 129 │ }) => {
     ╰────
  × the name `default` is exported multiple times
     ╭─[/home/runner/workspace/src/components/ui/ScientificHighlightedText.tsx:117:1]
 114 │   );
 115 │ };
 116 │ 
 117 │ export default ScientificHighlightedText;
     · ────────────────────┬────────────────────
     ·                     ╰── previous exported here
 118 │ import React from 'react';
 119 │ import { cn } from '@/lib/utils';
 120 │ 
 121 │ interface ScientificHighlightedTextProps {
 122 │   children: React.ReactNode;
 123 │   className?: string;
 124 │ }
 125 │ 
 126 │ const ScientificHighlightedText: React.FC<ScientificHighlightedTextProps> = ({ 
 127 │   children, 
 128 │   className 
 129 │ }) => {
 130 │   return (
 131 │     <div className={cn("relative py-2", className)}>
 132 │       <div className="absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b from-indigo-500 to-natural-600 rounded-full"></div>
 133 │       <div className="pl-4">{children}</div>
 134 │     </div>
 135 │   );
 136 │ };
 137 │ 
 138 │ export default ScientificHighlightedText;
     · ────────────────────┬────────────────────
     ·                     ╰── exported more than once
     ╰────

Advice:   ☞ Exported identifiers must be unique
/home/runner/workspace/src/components/ui/ScientificHighlightedText.tsx:15:1
Click outside, press Esc key, or fix the code to dismiss.
You can also disable this overlay by setting server.hmr.overlay to false in vite.config.js.